import { RedisClientType } from "redis";
import { SwiftAgent } from "swift-agent";

import { addResultToStream } from "../redis.js";
import { runInstruction, to } from "../utils.js";
import { RequestHandler, RequestMessage } from "../types.js";

export class GeneralCaseHandler implements RequestHandler {
  private agent: SwiftAgent;
  private client: RedisClientType;

  constructor(agent: SwiftAgent, client: RedisClientType) {
    this.agent = agent;
    this.client = client;
  }

  async execute(request: RequestMessage): Promise<void> {
    const { requestId, instruction, sender, groupMembers, ledgerId, channelId, messageId } = request.message;

    const [error] = await to((async () => {
      const messages = await runInstruction(this.agent, instruction, sender, groupMembers, ledgerId, messageId);
      const result = messages.at(-1)?.text;

      if (result) {
        await addResultToStream(this.client, { message: { result, channelId, messageId, requestId } });
      } else {
        throw Error("No text generated by the agent.");
      }
    })());

    if (!error) {
      this.agent.resetMessages();
    } else {
      console.error(error);
    }
  }
}
